package actores;import java.awt.Point;import java.util.ArrayList;/** * @author milver */public class Moved{    private int rejilla;    private ArrayList<Point> puntosLineal;    public Moved(){    	rejilla=1;        puntosLineal=new ArrayList<Point>();    }    private boolean repetido(int y,ArrayList<Point> lista){    	boolean res=true;            if (lista.size()>0) {                    if (lista.get(lista.size()-1).y==y){                            res=false;                    }            }    	return res;    }    private void generarPuntos(float xi,float yi,float xf,float yf){        float m=(yf-yi)/(xf-xi);        if (xi<xf) {            while (xi<xf) {            	if (repetido((int)getPuntoY((xi), m, xf, yf),puntosLineal)) {            		puntosLineal.add(new Point((int)(xi), (int)getPuntoY((xi), m, xf, yf)));				}                xi=xi+getRejilla();            }            puntosLineal.add(new Point((int)xf,(int)yf));        }        else{            while (xi>xf) {            	if (repetido((int)getPuntoY((xi), m, xf, yf),puntosLineal)) {                    puntosLineal.add(new Point((int)(xi), (int)getPuntoY((xi), m, xf, yf)));					}                xi=xi-getRejilla();            }            puntosLineal.add(new Point((int)xf,(int)yf));        }    }    private float getPuntoY(float xi,float m,float xf,float yf){        return (yf-(m*(xf-xi)));    }    public ArrayList<Point> getPointsDiagonal(int xi,int yi,int xf,int yf){        generarPuntos(xi, yi, xf, yf);        return puntosLineal;    }    public int getRejilla() {		return rejilla;	}	public void setRejilla(int rejilla) {		this.rejilla = rejilla;	}	/*public static void main(String[] args) {        Moved mo=new Moved();        System.out.println(mo.parabolaX(8, 24, -1));    }*/	public ArrayList<Point> parabola(int vx,int vy){    	ArrayList<Point> puntosParabola=new ArrayList<Point>();    	final int fx=vx,fy=vy;        int t=20;        for(int h=0;h<t;h++){            int auxx=t-h;            puntosParabola.add(new Point((fx-auxx*12), (fy+auxx*auxx)));        }        for(int h=0;h<=t;h++){            int auxx=h;            puntosParabola.add(new Point((fx+auxx*12), (fy+auxx*auxx)));        }        return puntosParabola;    }	public ArrayList<Point> circulo(int h,int k,int r) {		ArrayList<Point>puntosCirculo=new ArrayList<Point>();		for (int i = h-r; i < h+r; i=i+rejilla) {			if (repetido((int)getYCircunferencias(i, h, k, r), puntosCirculo)) {				puntosCirculo.add(new Point((i), (int)getYCircunferencias(i, h, k, r)));				System.out.println("Y = "+getYCircunferencias(i, h, k, r));			}		}		puntosCirculo.add(new Point((h+r), (int)getYCircunferencias(h+r, h, k, r)));		ArrayList<Point>copia=puntosCirculo;		for (int i = copia.size()-2; i >0; i--) {			puntosCirculo.add(new Point(copia.get(i).x,k-(copia.get(i).y-k)));		}		return puntosCirculo;	}	private double getYCircunferencias(int x,int h,int k,int r){		double y=Math.pow((Math.pow((double)r, 2.0)-(Math.pow((x-h), 2.0))), 0.5)+k;		return y;	}	private ArrayList<Point> parabolaX(int h,int k,int p){		ArrayList<Point>puntosParabolaX=new ArrayList<Point>();		if (p>0) {			for (int i = h; i < h+10; i=i+rejilla) {				if (repetido((int)getYParabola(i, p, h, k), puntosParabolaX)) {					puntosParabolaX.add(new Point(i, (int)getYParabola(i, p, h, k)));				}			}		} else {			for (int i = h; i > h-10; i=i-rejilla) {				if (repetido((int)getYParabola(i, p, h, k), puntosParabolaX)) {					puntosParabolaX.add(new Point(i, (int)getYParabola(i, p, h, k)));				}			}		}		return getOrdenadoParabolaX(k, puntosParabolaX);	}	private ArrayList<Point> getOrdenadoParabolaX(int k,ArrayList<Point> lista){		ArrayList<Point> listaUno=new ArrayList<Point>();		ArrayList<Point> listaDos=lista;		for (int i = listaDos.size()-1; i > 0; i--) {			listaUno.add(new Point(listaDos.get(i).x, k-(listaDos.get(i).y-k)));		}		for (int i = 0; i < listaDos.size()-1; i++) {			listaUno.add(listaDos.get(i));		}		return listaUno;	}	private double getYParabola(int x,int p,int h,int k) {		double y=Math.pow((4*p*(x-h)), 0.5)+k;		return y;	}	}